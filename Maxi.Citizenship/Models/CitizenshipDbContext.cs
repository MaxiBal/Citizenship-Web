// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Maxi.Citizenship.Models;

public partial class CitizenshipDbContext : DbContext
{
    public CitizenshipDbContext(DbContextOptions<CitizenshipDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Answer> Answers { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<QuestionCategory> QuestionCategories { get; set; }

    public virtual DbSet<QuestionOption> QuestionOptions { get; set; }

    public virtual DbSet<QuestionSubCategory> QuestionSubCategories { get; set; }

    public virtual DbSet<QuestionType> QuestionTypes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Answer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("answer_pk");

            entity.ToTable("answer");

            entity.HasIndex(e => e.QuestionId, "answer_question_id_idx");

            entity.Property(e => e.Id)
                .HasColumnOrder(0)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.AddlInfo)
                .HasColumnOrder(7)
                .HasColumnType("character varying")
                .HasColumnName("addl_info");
            entity.Property(e => e.CreatedBy)
                .HasColumnOrder(2)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedOn)
                .HasColumnOrder(1)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_on");
            entity.Property(e => e.ImgUrl)
                .HasColumnOrder(8)
                .HasColumnType("character varying")
                .HasColumnName("img_url");
            entity.Property(e => e.IsSupplemental)
                .HasColumnOrder(9)
                .HasColumnName("is_supplemental");
            entity.Property(e => e.Key)
                .IsRequired()
                .HasColumnOrder(6)
                .HasColumnType("character varying")
                .HasColumnName("key");
            entity.Property(e => e.LastModifiedBy)
                .HasColumnOrder(4)
                .HasColumnName("last_modified_by");
            entity.Property(e => e.LastModifiedOn)
                .HasColumnOrder(3)
                .HasDefaultValueSql("now()")
                .HasColumnName("last_modified_on");
            entity.Property(e => e.QuestionId)
                .HasColumnOrder(5)
                .HasColumnName("question_id");
            entity.Property(e => e.Sort)
                .HasColumnOrder(10)
                .HasDefaultValueSql("1")
                .HasColumnName("sort");

            entity.HasOne(d => d.Question).WithMany(p => p.Answers)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("answer_fk");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("question_pk");

            entity.ToTable("question");

            entity.HasIndex(e => e.QuestionSubCategoryId, "question_question_sub_category_id_idx");

            entity.HasIndex(e => e.QuestionTypeId, "question_question_type_id_idx");

            entity.Property(e => e.Id)
                .HasColumnOrder(0)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.CreatedBy)
                .HasColumnOrder(2)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedOn)
                .HasColumnOrder(1)
                .HasDefaultValueSql("now()")
                .HasColumnType("time with time zone")
                .HasColumnName("created_on");
            entity.Property(e => e.HasAsterisk)
                .HasColumnOrder(9)
                .HasColumnName("has_asterisk");
            entity.Property(e => e.ImageUrl)
                .HasColumnOrder(6)
                .HasColumnName("image_url");
            entity.Property(e => e.LastModifiedBy)
                .HasColumnOrder(4)
                .HasColumnName("last_modified_by");
            entity.Property(e => e.LastModifiedOn)
                .HasColumnOrder(3)
                .HasDefaultValueSql("now()")
                .HasColumnType("time with time zone")
                .HasColumnName("last_modified_on");
            entity.Property(e => e.Prompt)
                .IsRequired()
                .HasColumnOrder(5)
                .HasColumnType("character varying")
                .HasColumnName("prompt");
            entity.Property(e => e.QuestionSubCategoryId)
                .HasColumnOrder(7)
                .HasColumnName("question_sub_category_id");
            entity.Property(e => e.QuestionTypeId)
                .HasColumnOrder(8)
                .HasColumnName("question_type_id");

            entity.HasOne(d => d.QuestionSubCategory).WithMany(p => p.Questions)
                .HasForeignKey(d => d.QuestionSubCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("question_fk");

            entity.HasOne(d => d.QuestionType).WithMany(p => p.Questions)
                .HasForeignKey(d => d.QuestionTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("question_fk_1");
        });

        modelBuilder.Entity<QuestionCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("question_category_pk");

            entity.ToTable("question_category");

            entity.Property(e => e.Id)
                .HasColumnOrder(0)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.AppName)
                .IsRequired()
                .HasColumnOrder(5)
                .HasColumnType("character varying")
                .HasColumnName("app_name");
            entity.Property(e => e.CreatedBy)
                .HasColumnOrder(2)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedOn)
                .HasColumnOrder(1)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_on");
            entity.Property(e => e.LastModifiedBy)
                .HasColumnOrder(4)
                .HasColumnName("last_modified_by");
            entity.Property(e => e.LastModifiedOn)
                .HasColumnOrder(3)
                .HasDefaultValueSql("now()")
                .HasColumnName("last_modified_on");
        });

        modelBuilder.Entity<QuestionOption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("question_options_pk");

            entity.ToTable("question_options");

            entity.HasIndex(e => e.QuestionId, "question_options_question_id_idx");

            entity.Property(e => e.Id)
                .HasColumnOrder(0)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.AppName)
                .IsRequired()
                .HasColumnOrder(6)
                .HasColumnType("character varying")
                .HasColumnName("app_name");
            entity.Property(e => e.CreatedBy)
                .HasColumnOrder(2)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedOn)
                .HasColumnOrder(1)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_on");
            entity.Property(e => e.LastModifiedBy)
                .HasColumnOrder(4)
                .HasColumnName("last_modified_by");
            entity.Property(e => e.LastModifiedOn)
                .HasColumnOrder(3)
                .HasDefaultValueSql("now()")
                .HasColumnName("last_modified_on");
            entity.Property(e => e.QuestionId)
                .HasColumnOrder(5)
                .HasColumnName("question_id");

            entity.HasOne(d => d.Question).WithMany(p => p.QuestionOptions)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("question_options_fk");
        });

        modelBuilder.Entity<QuestionSubCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("question_sub_category_pk");

            entity.ToTable("question_sub_category");

            entity.HasIndex(e => e.QuestionCategoryId, "question_sub_category_question_category_id_idx");

            entity.Property(e => e.Id)
                .HasColumnOrder(0)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.AppName)
                .IsRequired()
                .HasColumnOrder(6)
                .HasColumnType("character varying")
                .HasColumnName("app_name");
            entity.Property(e => e.CreatedBy)
                .HasColumnOrder(2)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedOn)
                .HasColumnOrder(1)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_on");
            entity.Property(e => e.LastModifiedBy)
                .HasColumnOrder(4)
                .HasColumnName("last_modified_by");
            entity.Property(e => e.LastModifiedOn)
                .HasColumnOrder(3)
                .HasDefaultValueSql("now()")
                .HasColumnName("last_modified_on");
            entity.Property(e => e.QuestionCategoryId)
                .HasColumnOrder(5)
                .HasColumnName("question_category_id");

            entity.HasOne(d => d.QuestionCategory).WithMany(p => p.QuestionSubCategories)
                .HasForeignKey(d => d.QuestionCategoryId)
                .HasConstraintName("question_sub_category_fk");
        });

        modelBuilder.Entity<QuestionType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("question_type_pk");

            entity.ToTable("question_type");

            entity.Property(e => e.Id)
                .HasColumnOrder(0)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.AppName)
                .IsRequired()
                .HasColumnOrder(5)
                .HasColumnType("character varying")
                .HasColumnName("app_name");
            entity.Property(e => e.CreatedBy)
                .HasColumnOrder(2)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedOn)
                .HasColumnOrder(1)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_on");
            entity.Property(e => e.LastModifiedBy)
                .HasColumnOrder(4)
                .HasColumnName("last_modified_by");
            entity.Property(e => e.LastModifiedOn)
                .HasColumnOrder(3)
                .HasDefaultValueSql("now()")
                .HasColumnName("last_modified_on");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}